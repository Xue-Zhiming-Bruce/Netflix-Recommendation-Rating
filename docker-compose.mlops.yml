services:

  # MLflow Tracking Server
  mlflow:
    build: .
    entrypoint: ["/bin/bash"]
    command: >
      -c "mlflow server
      --backend-store-uri file:///mlflow/mlruns
      --default-artifact-root s3://mlflow-artifacts/
      --host 0.0.0.0
      --port 5000"
    environment:
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_DEFAULT_REGION: ${AWS_DEFAULT_REGION:-us-west-1}
    volumes:
      - mlflow_data:/mlflow
    ports:
      - "5001:5000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - mlops-network

  # Airflow Webserver
  airflow-webserver:
    build: .
    entrypoint: ["/bin/bash"]
    command: >
      -c "airflow webserver"
    environment:
      AIRFLOW__CORE__EXECUTOR: SequentialExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: sqlite:////opt/airflow/airflow.db
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      AIRFLOW__WEBSERVER__EXPOSE_CONFIG: 'true'
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'false'
      AIRFLOW__SCHEDULER__DAG_DIR_LIST_INTERVAL: 30
      AIRFLOW__CORE__DAGS_FOLDER: /opt/airflow/dags
      AIRFLOW__WEBSERVER__SECRET_KEY: mlops-secret-key-2024
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_DEFAULT_REGION: ${AWS_DEFAULT_REGION:-us-west-1}
      MLFLOW_TRACKING_URI: http://mlflow:5000
      S3_BUCKET_DATA: netflix-recommend-project
      S3_BUCKET_ARTIFACTS: mlflow-artifacts
      S3_BUCKET_MONITORING: monitoring-reports
      GIT_PYTHON_REFRESH: quiet
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
      - ./utils:/opt/airflow/utils
      - ./data:/opt/airflow/data
      - ./datamart:/opt/airflow/datamart
      - ./requirements-mlops.txt:/opt/airflow/requirements-mlops.txt
      - airflow_data:/opt/airflow
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - mlops-network

  # Airflow Scheduler
  airflow-scheduler:
    build: .
    entrypoint: ["/bin/bash"]
    command: >
      -c "airflow scheduler"
    environment:
      AIRFLOW__CORE__EXECUTOR: SequentialExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: sqlite:////opt/airflow/airflow.db
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      AIRFLOW__SCHEDULER__DAG_DIR_LIST_INTERVAL: 30
      AIRFLOW__CORE__DAGS_FOLDER: /opt/airflow/dags
      AIRFLOW__WEBSERVER__SECRET_KEY: mlops-secret-key-2024
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_DEFAULT_REGION: ${AWS_DEFAULT_REGION:-us-west-1}
      MLFLOW_TRACKING_URI: http://mlflow:5000
      S3_BUCKET_DATA: netflix-recommend-project
      S3_BUCKET_ARTIFACTS: mlflow-artifacts
      S3_BUCKET_MONITORING: monitoring-reports
      GIT_PYTHON_REFRESH: quiet
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
      - ./utils:/opt/airflow/utils
      - ./data:/opt/airflow/data
      - ./datamart:/opt/airflow/datamart
      - ./requirements-mlops.txt:/opt/airflow/requirements-mlops.txt
      - airflow_data:/opt/airflow
    networks:
      - mlops-network

  # Airflow Init (run once to initialize database)
  airflow-init:
    image: apache/airflow:2.7.0
    command: >
      bash -c "pip install --no-cache-dir -r /opt/airflow/requirements-mlops.txt &&
      airflow db init &&
      airflow users create --username admin --firstname Admin --lastname User --role Admin --email admin@example.com --password admin"
    environment:
      AIRFLOW__CORE__EXECUTOR: SequentialExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: sqlite:////opt/airflow/airflow.db
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      AIRFLOW__CORE__DAGS_FOLDER: /opt/airflow/dags
      AIRFLOW__WEBSERVER__SECRET_KEY: mlops-secret-key-2024
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
      - ./data:/opt/airflow/data
      - ./datamart:/opt/airflow/datamart
      - ./requirements-mlops.txt:/opt/airflow/requirements-mlops.txt
      - airflow_data:/opt/airflow
    networks:
      - mlops-network

  # Evidently AI Service
  evidently:
    build: .
    entrypoint: ["/bin/bash"]
    command: >
      -c "evidently ui --host 0.0.0.0 --port 8000"
    environment:
      EVIDENTLY_WORKSPACE: /app/workspace
    volumes:
      - evidently_workspace:/app/workspace
      - ./monitoring:/app/monitoring
    ports:
      - "8085:8000"
    networks:
      - mlops-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    ports:
      - "80:80"
    depends_on:
      - mlflow
      - airflow-webserver
      - evidently
    networks:
      - mlops-network

volumes:
  mlflow_data:
  airflow_data:
  evidently_workspace:

networks:
  mlops-network:
    driver: bridge